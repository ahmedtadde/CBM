{
    "collab_server" : "",
    "contents" : "\nlibraries <- function(){\n  library(shiny)\n  library(shinyapps)\n  library(shinythemes)\n  library(data.table)\n  library(dplyr)\n  library(plotly)\n  library(foreach)\n  library(arules)\n  library(psych)\n  library(DataCombine)\n  \n}\n\ngetBoxOfficeData <- function(names){\n  \n  setwd('../R')\n  foreach( i = 1:length(names)) %do% {\n    bom = read.csv(paste0(names[i],\"_bom.csv\"),\n                   na.strings = \"NA\",\n                   stringsAsFactors = F,\n                   header = TRUE)\n    \n    bom = bom[ , order(names(bom))]\n    \n    bom = data.table(bom,keep.rownames = FALSE)\n    \n    colum.group.1 <- c(\"director\",\n                       \"distributor\",\n                       \"week_1_gross\",\n                       \"budget\",\n                       \"domestic_BO\",\n                       \"foreign_BO\",\n                       \"genre\",\n                       \"rating\",\"runtime\",\"Title\")\n\n    df.1 <- select(bom, which(names(bom)%in% colum.group.1))\n    df.1 <- data.table(data.frame(df.1)[ , order(names(df.1),decreasing = TRUE)])\n    setnames(df.1, c(\"Title\",\"week_1_gross\"),c(\"title\",\"ow_gross\"))\n    df.info <- df.1\n\n    colum.group.2.1 <- paste(\"week\",seq(1,9),\"avg\", sep=\"_\")\n    colum.group.2.2 <- paste(\"week\",seq(10,15),\"avg\", sep=\"_\")\n    df.2.1 <- select(bom, which(names(bom)%in% colum.group.2.1))\n    df.2.2 <- select(bom, which(names(bom)%in% colum.group.2.2))\n    df.avg <- data.table(cbind(df.2.1,df.2.2))\n\n    df.avg <- data.frame(apply(data.frame(df.avg),2,as.numeric,na.rm = T))\n    df.avg <- data.table(cbind(\"title\"=bom$Title, df.avg))\n    df.avg[, score := apply(select(df.avg,c(2:16)),1, weighted.mean, seq(1,15), na.rm = T)]\n    df.avg[, score := score/10000]\n\n    colum.group.2.1 <- paste(\"week\",seq(1,9),\"change\", sep=\"_\")\n    colum.group.2.2 <- paste(\"week\",seq(10,15),\"change\", sep=\"_\")\n    df.2.1 <- select(bom, which(names(bom)%in% colum.group.2.1))\n    df.2.2 <- select(bom, which(names(bom)%in% colum.group.2.2))\n    df.change <- data.table(cbind(df.2.1,df.2.2))\n    df.change <- data.frame(apply(data.frame(df.change),2,as.numeric,na.rm = T))\n\n    normalize.change <- function(vector) {\n\n      negative <- vector[which(vector<0)]\n      negative <- (1+negative)\n      vector[which(vector<0)] <- negative\n      return(vector)\n    }\n\n    df.change <- data.frame(apply(data.frame(df.change),2,normalize.change))\n\n    cumulative.change <- function(vector){\n      vector[which(is.na(vector))] <- 0\n      vector <-  cumprod(vector)\n      vector[which(vector == 0.0)] <- NA\n\n      return(vector)\n    }\n\n    columns <- names(df.change)\n    df.change <- transpose(data.frame(apply(data.frame(df.change),1,cumulative.change)))\n    names(df.change) <- columns\n    df.change$score <- apply(df.change,1, weighted.mean, na.rm = T, seq(2,15))\n    df.change <- data.table(cbind(\"title\"=bom$Title, df.change))\n\n    colum.group.2.1 <- paste(\"week\",seq(1,9),\"rank\", sep=\"_\")\n    colum.group.2.2 <- paste(\"week\",seq(10,15),\"rank\", sep=\"_\")\n    df.2.1 <- select(bom, which(names(bom)%in% colum.group.2.1))\n    df.2.2 <- select(bom, which(names(bom)%in% colum.group.2.2))\n    df.rank <- data.table(cbind(df.2.1,df.2.2))\n    df.rank <- data.frame(apply(data.frame(df.rank),2,as.numeric,na.rm = T))\n\n    normalize.rank <- function(vector) {10/vector}\n    df.rank.bis <- transpose(data.frame(apply(df.rank,1,normalize.rank)))\n\n    rank.score <- apply(df.rank.bis,1, weighted.mean, na.rm = T, seq(1,15))\n    df.rank <- data.table(cbind(\"title\"=bom$Title, df.rank, \"score\" = rank.score))\n\n\n    bom_score <- data.table(\"avg\" = df.avg$score,\n                            \"change\" = df.change$score,\n                            \"rank\" = df.rank$score)\n    \n    \n    info <- df.info %>% select(c(2,1,3,4,6,7,10))\n    \n    info$runtime[which(info$runtime < 90)] <- 1\n    info$runtime[which(info$runtime >= 90 & info$runtime < 120 )] <- 2\n    info$runtime[which(info$runtime >= 120 & info$runtime < 150 )] <- 3\n    info$runtime[which(info$runtime >= 150 & info$runtime < 180 )] <- 4\n    info$runtime[which(info$runtime >= 180)] <- 5\n\n    info$rating <- as.character(info$rating)\n    info$rating[which(info$rating== \"PG\")] <- 1\n    info$rating[which(info$rating== \"PG-13\")] <- 2\n    info$rating[which(info$rating== \"R\")] <- 3\n    info$rating <- as.numeric(info$rating)\n    \n    info$budget[which(info$title %in% c(\"The Amazing Spider-Man 2\"))] <- 255*10^6\n    info$budget[which(info$title %in% c(\"Batman: Mask of the Phantasm\"))] <- 6*10^6\n    info$budget[which(info$title %in% c(\"Blade\"))] <- 45*10^6\n    info$budget[which(info$title %in% c(\"Superman III\"))] <- 39*10^6\n    info$budget[which(info$title %in% c(\"Supergirl\"))] <- 35*10^6\n    info$title <- NULL\n    \n\n    # info$combined_BO <- apply(select(info, which(names(info) %in% c(\"foreign_BO\",\"domestic_BO\"))),\n    #                           1, weighted.mean,c(0.3,0.7) ,na.rm = T)\n    # info$combined_BO <- (info$combined_BO)/(10^8)\n    # info$ow_score.1 <- 1 - (info$ow_gross/info$domestic_BO)\n    # info$ow_score.2 <- info$ow_gross/info$budget\n    # info$investment_return <- info$domestic_BO/info$budget\n\n    \n    v <- apply(select(info, which(names(info) %in% c(\"foreign_BO\",\"domestic_BO\"))),\n               1, weighted.mean,c(0.3,0.7) ,na.rm = T)\n\n    w <- 1 - (info$ow_gross/info$domestic_BO)\n    x <- info$ow_gross/info$budget\n    y <- w/info$budget\n    \n    weeks_in_theater <- function(vector){length(na.omit(vector))}\n    z <- apply(select(df.rank, c(2:16)),1,weeks_in_theater)/15\n\n    table <- data.table(v,w,x,y,z)\n\n    info$other <- apply(table,1, geometric.mean,na.rm = T) \n    # info$theater_run.score <- z\n    \n    info$budget -> v\n    info$foreign_BO -> w\n    info$domestic_BO -> x\n    info$ow_gross -> y\n    \n    info$budget <- NULL\n    info$foreign_BO <- NULL\n    info$domestic_BO <- NULL\n    info$ow_gross <- NULL\n    \n    \n    # weeks_in_theater <- function(vector){length(na.omit(vector))}\n    # theater_run <- apply(select(df.rank, c(2:16)),1,weeks_in_theater)\n\n    # bom <- data.table(bom_score, info, \"theater_run_score\" = theater_run/15)\n    bom <- data.table(bom_score, info)\n    \n    # bom$bo_score <- apply(bom,1, weighted.mean,c(0.15,0.15,0.15,0.05,0.05,0.1,0.1,0.1,0.15,1), na.rm = T)\n    bom$bo_score <- apply(bom,1, weighted.mean,c(0.2,0.2,0.2,0.1,0.1,0.2), na.rm = T)\n    \n    \n    bom$budget <- v\n    bom$foreign_BO <- w\n    bom$domestic_BO <- x\n    bom$ow_gross <- y\n\n    bom$studio <- df.info$distributor\n    bom$director <- df.info$director\n\n    df.avg$score <- NULL\n    df.change$score <- NULL\n    df.rank$score <- NULL\n\n    original <- merge.data.frame(x = df.info, y = df.rank, by.y = \"title\")\n    original <- merge.data.frame(x = original, y = df.avg, by.y = \"title\")\n    original <- merge.data.frame(x = original, y = df.change, by.y = \"title\")\n    original <- data.table(original) %>% arrange(title)\n\n    rm(list = c(\"df.avg\", \"df.change\",\n                \"df.rank\",\"x\",\"y\",\n                \"info\",\"bom_score\",\n                \"df.info\",\"weeks_in_theater\",\n                # \"theater_run\",\n                \"df.2.1\",\"df.2.2\",\"df.1\",\"colum.group.1\",\"df.rank.bis\",\"rank.score\",\n                \"colum.group.2.1\",\"colum.group.2.2\",\"cumulative.change\",\n                \"normalize.rank\",\"normalize.change\",\"columns\"))\n\n    return(list(\"processed\" = bom, \"raw\" = original))\n    # return(bom)\n    \n  } -> results ; rm(i)\n  \n  names(results) <- names\n \n  setwd('../App')\n  return(results)\n}\n\n\n\n\n\n\n\n\ngetCriticsData <- function(names){\n  \n  setwd('../R')\n  \n  foreach( i = 1:length(names)) %do% {\n    \n    omdb = read.csv(paste0(names[i],\"_omdb.csv\"),\n                    na.strings = \"N/A\", \n                    stringsAsFactors = F,\n                    header = TRUE)\n    \n    omdb = omdb[ , order(names(omdb))]\n    omdb = data.table(omdb,keep.rownames = FALSE)\n    setnames(omdb, \"Title\", \"title\")\n    \n    omdb$title -> titles\n    omdb_score <- omdb %>% select(c(3,4,9,10,12,13))\n    cols <- names(omdb_score)\n    omdb_score <- transpose(data.frame(apply(omdb_score, 1, as.character, na.rm = T)))\n    omdb_score <- data.frame(apply(omdb_score, 1, as.numeric, na.rm = T))\n    omdb_score <- transpose(omdb_score)\n    names(omdb_score) <- cols; rm(cols)\n    omdb_score$title <- titles\n    omdb_score <- data.table(omdb_score)\n    return(omdb_score)\n    omdb_score$RT_audience_perc[which(is.na(omdb_score$RT_audience_perc))] <- 26\n    omdb_score$RT_audience_rating[which(is.na(omdb_score$RT_audience_rating))] <- 2.3\n    omdb_score$RT_perc[which(is.na(omdb_score$RT_perc))] <- 7\n    omdb_score$RT_rating[which(is.na(omdb_score$RT_rating))] <- 3.2\n    \n    omdb_score[, RT_score := 100*(RT_rating*RT_perc/1000)]\n    omdb_score[, imdb_rating := 10*(imdb_rating)]\n    omdb_score[, RT_audience_score := 100*(RT_audience_rating*RT_audience_perc/500)]\n    \n    omdb_score <- omdb_score%>% select(c(1,2,7,8))\n    omdb_score$critics_score <- apply(omdb_score,1,weighted.mean,c(0.1,0.4,0.4,0.1),na.rm = T)\n    \n    info <- data.frame(\"plot\" = omdb$plot,\n                       \"release_date\" = omdb$release_date,\n                       \"poster\" = omdb$poster,\n                       \"title\" = omdb$title)\n    \n    critics <- data.table(omdb_score, info)\n    \n    \n    rm(omdb_score)\n    rm(info)\n    \n    omdb <- omdb%>% arrange(title)\n    return(list(\"processed\"= critics, \"raw\" = omdb))\n    \n  } -> results; rm(list=c(\"i\",\"critics\",\"omdb\"))\n  \n  names(results) <- names\n  setwd('../App')\n  return(results)\n  \n}\n\n\n\n\n\ngetData <- function(names){\n  \n  BO <- getBoxOfficeData(names)\n  Critics <- getCriticsData(names)\n  dc <- data.table(BO$dc$processed, Critics$dc$processed)\n  # return(dc)\n  # dc$combined_score <- apply(select(dc,c(11,22)),1,weighted.mean, c(0.4,0.6),na.rm =T)\n  dc$combined_score <- apply(select(dc,which(names(dc)%in% c(\"bo_score\",\"critics_score\"))),\n                             1,weighted.mean, c(0.4,0.6),na.rm =T)\n  dc$IP <- rep(\"DC\", dim(dc)[1])\n  \n  \n  marvel <- data.table(BO$marvel$processed, Critics$marvel$processed)\n  # marvel$combined_score <- apply(select(marvel,c(11,22)),1,weighted.mean, c(0.4,0.6), na.rm =T)\n  marvel$combined_score <- apply(select(marvel,which(names(marvel)%in% c(\"bo_score\",\"critics_score\"))),\n                                 1,weighted.mean, c(0.4,0.6),na.rm =T)\n  marvel$IP <- rep(\"Marvel\", dim(marvel)[1])\n\n  movies <- data.table(rbind(dc,marvel))\n  movies$plot <- as.character(movies$plot)\n  movies$release_date <- as.character(movies$release_date)\n  movies$poster <- as.character(movies$poster)\n  movies$title <- as.character(movies$title)\n\n  get_year <- function(x){\n    foreach( i = 1:length(x), .combine = c) %do% {\n      if (is.na(x[i])) {\n        return(x[i])\n      }\n      else{\n        return(strsplit(x[i], \" \")[[1]][3])\n      }\n\n    } -> result; rm(i)\n\n    return(result)\n  }\n\n  get_month <- function(x){\n    foreach( i = 1:length(x), .combine = c) %do% {\n      if (is.na(x[i])) {\n        return(x[i])\n      }\n      else{\n        return(strsplit(x[i], \" \")[[1]][2])\n      }\n\n    } -> result; rm(i)\n\n    return(result)\n  }\n\n  get_day <- function(x){\n    foreach( i = 1:length(x), .combine = c) %do% {\n      if (is.na(x[i])) {\n        return(x[i])\n      }\n      else{\n        return(strsplit(x[i], \" \")[[1]][1])\n      }\n\n    } -> result; rm(i)\n\n    return(result)\n  }\n\n  # movies$release_day <- get_day(movies$release_date)\n  movies$release_month <- get_month(movies$release_date)\n  movies$release_year <- as.integer(get_year(movies$release_date))\n  movies$release_period <- rep(\"\", dim(movies)[1])\n  movies$release_period[which(movies$release_year < 1998)] <- \"First Wave\"\n  movies$release_period[which(movies$release_year >= 1998 & movies$release_year < 2008)] <- \"Second Wave\"\n  movies$release_period[which(movies$release_year >= 2008 & movies$release_year < 2012)] <- \"Third Wave\"\n  movies$release_period[which(movies$release_year >= 2012)] <- \"Fourth Wave\"\n\n  rm(list=c(\"get_day\",\"get_year\",\"get_month\"))\n\n  movies$class <- cut(movies$combined_score,\n                      breaks = 10,\n                      labels = c(\n                                 \"F\",\n                                 \"E\",\n                                 \"D-\",\n                                 \"D\",\n                                 \"C-\",\n                                 \"C\",\n                                 \"B\",\n                                 \"B+\",\n                                 \"A\",\n                                 \"A+\"),\n                      ordered_result = T\n                      )\n\n  # movies$class <- as.character(movies$class)\n\n  movies$studio <- as.character(movies$studio)\n  movies$studio[which(movies$studio == \"Buena Vista\")] <- \"Disney\"\n  movies$studio[which(movies$studio == \"Sony / Columbia\")] <- \"Sony\"\n  movies$studio[which(movies$studio == \"Lionsgate/Summit\")] <- \"Lionsgate\"\n  movies$studio[which(movies$studio == \"Lions Gate\")] <- \"Lionsgate\"\n\n\n\n  movies <- movies%>%arrange(desc(combined_score))\n  movies$overall_rank <- seq(1,dim(movies)[1])\n  # movies[, overall_rank:= seq(1,dim(movies)[1])]\n\n  fix.director.names <- function(vector){\n    x <- na.omit(vector)\n    foreach(i = 1:length(x), .combine = c) %do% {\n      strsplit(x[i],\"'\")[[1]][2]\n    } -> fixed.names\n\n    vector[which(is.na(vector) == F)] <- fixed.names\n    return(vector)\n  }\n\n  movies$director <- fix.director.names(movies$director)\n\n  ff4.revised.plot <- c(\"Scientist Reed Richards (Loan Gruffudd) persuades his arrogant former classmate Victor von Doom (Julian McMahon), to fund his experiments with cosmic energy. On von Doom's space station, the crew - including astronaut Ben Grimm (Michael Chiklis), researcher Sue Storm (Jessica Alba) and pilot Johnny Storm (Chris Evans) - are exposed to a mysterious cosmic storm that bestows super powers upon them. As they cope with their transfortmations, von Doom vows his revenge.\")\n  thor2.revised.plot <- c(\"In ancient times, the gods of Asgard fought and won a war against an evil race known as the Dark Elves. The survivors were neutralized, and their ultimate weapon -- the Aether -- was buried in a secret location. Hundreds of years later, Jane Foster (Natalie Portman) finds the Aether and becomes its host, forcing Thor (Chris Hemsworth) to bring her to Asgard before Dark Elf Malekith (Christopher Eccleston) captures her and uses the weapon to destroy the Nine Realms -- including Earth.\")\n  # xmen_dofp.revised.plot <- c(\"\")\n  \n  movies[which(movies$title %in% \"Fantastic Four(2005)\"),]$plot <- ff4.revised.plot\n  movies[which(movies$title %in% \"Thor 2: The Dark World\"),]$plot <- thor2.revised.plot\n  # movies[which(movies$title %in% \"X-men: Days of Future Past\"),]$plot <- xmen_dofp.revised.plot \n  \n  \n  rm(list =c(\"ff4.revised.plot\",\"thor2.revised.plot\"\n             # \"xmen_dofp.revised.plot\"\n             ))\n\n  return(list(\"df\" = movies, \"BO\" = BO, \"Critics\" = Critics))\n  # return(list(\"dc\" = dc, \"marvel\" = marvel))\n}\n\n\n\n\n\n\n\nViz <- function(df){\n  \n  df <- data.table(df)\n  df[, mapping_size:= critics_score * bo_score]\n  plot <- df %>% plot_ly(x = bo_score,\n                         y = critics_score,\n                         mode = \"markers\",\n                         size = mapping_size,\n                         color = class,\n                         colors = \"RdYlGn\",\n                         opacity = mapping_size,\n                         text = paste(toupper(title),\"<br>\",\n                                      \"Grade: \", toupper(class), \"<br>\",\n                                      \"Overall Critical Reception: \", round(critics_score,2),\"%\" ,\"<br>\",\n                                      \"Box Office Performance Index: \", round(bo_score,2),\"<br>\",\n                                      \"All-time Ranking: \", overall_rank),\n                         hoverinfo = \"text\")\n  \n  \n  \n  \n  \n  plot <- layout(plot,\n                 title = \"Ranking Visulation (hover on bubble for movie info)\",\n                 titlefont = list(size = 15, color = \"white\"),\n                 legend = list(font = list(size = 15, color = \"white\"),\n                               x = 0.9,y = 0.1\n                               ),\n                 autosize = F, \n                 width = 1400, \n                 height = 650, \n                 paper_bgcolor='rgba(0,0,0,0)',\n                 plot_bgcolor='rgba(0,0,0,0)',\n                 # margin = m,\n                 xaxis = list(title = \"Overall Box Office Performance Index (higher is better)\",\n                              showgrid = F,\n                              zeroline = FALSE,\n                              showline = FALSE,\n                              showticklabels = F,\n                              tickfont = list(size = 15, color = \"white\"),\n                              titlefont = list(size = 15, color = \"white\")\n                              # showgrid = F,\n                              # tickcolor = toRGB(\"white\"),\n                              # tickfont = list(color = toRGB(\"white\"), size = 10),\n                              # zeroline = FALSE,\n                              # showline = FALSE,\n                              # showticklabels = T\n                              ),\n                 yaxis = list(title = \"Overall Critical Reception (in %)\",\n                              showgrid = F,\n                              zeroline = FALSE,\n                              showline = FALSE,\n                              showticklabels = F,\n                              tickfont = list(size = 15, color = \"white\"),\n                              titlefont= list(size = 15, color = \"white\")\n                              # showgrid = F,\n                              # tickcolor = toRGB(\"white\"),\n                              # tickfont = list(color = toRGB(\"white\"), size = 10),\n                              # zeroline = FALSE,\n                              # showline = FALSE,\n                              # showticklabels = T\n                              )\n                 )\n  \n  \n  \n  # Get the list for the plot\n  plot <- plotly_build(plot)\n  \n  foreach(i =1:length(plot$data)) %do% {\n    \n    # Pick up the hover text\n    hvrtext <- plot$data[[i]]$text\n    # Split by line break and wt\n    hvrtext_fixed <- strsplit(hvrtext, split = '<br>mapping_size')\n    # Get the first element of each split\n    hvrtext_fixed <- lapply(hvrtext_fixed, function(x) x[1])\n    # Convert back to vector\n    hvrtext_fixed <- as.character(hvrtext_fixed)\n    # Assign as hovertext in the plot\n    plot$data[[i]]$text <- hvrtext_fixed\n    \n    \n  }\n  \n  rm(list=c(\"hvrtext\",\"hvrtext_fixed\"))\n  \n  df <- df %>% select(which(names(df) %in% c(\"title\",\"IP\",\"studio\",\"combined_score\",\"class\")))\n  setnames(df, names(df), c(\"Studio\",\"Title\",\"Combined Critics/BoxOffice Score\",\"IP\",\"Grade\"))\n  \n  \n  return(list(\"viz\"=plot, \"table\" = df))\n  \n}\n\n\n\n\nrank.by <- function(vector, List){\n  \n  df <- data.table(List$processed.data)\n  \n  options <- c(\n    \"critics_score\",\"bo_score\",\n    \"RT_perc\",\"RT_audience_perc\",\n    \"RT_rating\", \"RT_audience_rating\",\n    \"RT_score\",\"RT_audience_score\",\n    \"metascore\",\"imdb_rating\",\n    \"foreign_BO\",\"domestic_BO\",\"combined_BO\",\n    \"avg\",\"change\",\"rank\")\n  \n  if (vector %in% options == F){return(\"Invalid variable given for ranking\")}\n  \n  \n  bo.raw <- data.table(List$raw.data$BO)\n  critics.raw <- data.table(List$raw.data$critics)\n  \n  \n  if ( vector %in% names(bo.raw)){\n    table <- bo.raw %>% select(which(names(bo.raw)%in% c(\"title\",vector)))\n    \n    if ( vector == \"foreign_BO\") { table <- table %>%arrange(-table[[2]])}\n    else if ( vector == \"domestic_BO\") { table <- table %>%arrange(-table[[2]])}\n    else {table <- table %>%arrange(-table[[1]]) %>% select(2,1)}\n    \n    \n    table$rank <- seq(1,dim(table)[1])\n    table <- table %>%select(3,1,2)\n    x <- df %>% select(which(names(df)%in% c(\"title\",vector,\"movie_report\",\"poster\")))\n    table <- merge(table, x, by.y = \"title\", by.x= \"title\")\n    table <- data.table(table) %>% select(c(2,1,3,6,5)) %>% arrange(rank)\n    setnames(table, paste0(vector,\".x\"), vector)\n    \n    poster.pic.name <- function(vector){\n      foreach(i =1:length(vector),.combine = c)%do%{\n        name <- paste0(gsub(\" \",\"\", vector[i]),\".png\")\n        name <- gsub(\":\",\"\", name)\n        return(name)\n      } -> result ; rm(i)\n      \n      return(result)\n    }\n    \n    table$poster <-  poster.pic.name(table$title)\n    \n    return(table)\n  }\n  \n  else if ( vector %in% names(critics.raw) ){\n    table <- critics.raw %>% select(which(names(critics.raw)%in% c(\"title\",vector)))\n    table <- table %>% arrange(-table[[1]])%>% select(2,1)\n    \n    \n    table$rank <- seq(1,dim(table)[1])\n    table <- table %>%select(3,1,2)\n    \n    if (vector %in% c(\"imdb_rating\",\"metascore\")){\n      \n      x <- df %>% select(which(names(df)%in% c(\"title\",vector,\"movie_report\",\"poster\")))\n      table <- merge(table, x, by.y = \"title\", by.x= \"title\")\n      table <- data.table(table)%>% arrange(rank)%>% select(c(2,1,3,6,5))\n      setnames(table, paste0(vector,\".x\"), vector)\n      table <- table %>%select(2,3,4,5)\n      \n    } else{\n      x <- df %>% select(which(names(df)%in% c(\"title\",vector,\"movie_report\",\"poster\")))\n      table <- merge(table, x, by.y = \"title\", by.x= \"title\")\n      table <- data.table(table)%>% arrange(rank)%>% select(c(1,3,5,4))\n    }\n    \n    poster.pic.name <- function(vector){\n      foreach(i =1:length(vector),.combine = c)%do%{\n        name <- paste0(gsub(\" \",\"\", vector[i]),\".png\")\n        name <- gsub(\":\",\"\", name)\n        return(name)\n      } -> result ; rm(i)\n      \n      return(result)\n    }\n    table$poster <- poster.pic.name(table$title)\n    \n    \n    return(table)\n  }\n  \n  else {\n    table <- df %>% select(which(names(df)%in% c(\"title\",vector)))\n    table <- table %>% arrange(-table[[1]]) %>% select(2,1)\n    \n    \n    table$Rank <- seq(1,dim(table)[1])\n    table <- table %>%select(3,1,2)\n    \n    if (vector %in% c(\"avg\",\"change\",\"rank\")){\n      x <- df %>% select(which(names(df)%in% c(\"title\",vector,\"movie_report\",\"theater_run_score\",\"poster\")))\n      table <- merge(table, x, by.y = \"title\", by.x= \"title\")\n      table[[3]] <-  table[[3]] * table$theater_run_score\n      table <- data.table(table) %>% select(c(2,1,3,5,7,6))%>% arrange(desc(table[[3]]))\n      setnames(table, paste0(vector,\".x\"), vector)\n      # table <- table %>% arrange(-vector)\n      # table[, Rank:= seq(1, dim(table)[1])]\n      table <- table %>% select(c(2,3,5,6))\n    } \n    \n    else if (vector %in% c(\"bo_score\")){\n      x <- df %>% select(which(names(df)%in% c(\"title\",vector,\"movie_report\",\"theater_run_score\",\"poster\")))\n      table <- merge(table, x, by.y = \"title\", by.x= \"title\")\n      table[[3]] <-  table[[3]] * table$theater_run_score\n      table <- data.table(table) %>% select(c(2,1,3,5,7,6))%>% arrange(desc(table[[3]]))\n      setnames(table, paste0(vector,\".x\"), vector)\n      table <- table %>% select(c(2,3,5,6))\n    }\n    else {\n      x <- df %>% select(which(names(df)%in% c(\"title\",vector,\"movie_report\",\"poster\")))\n      table <- merge(table, x, by.y = \"title\", by.x= \"title\")\n      table <- data.table(table) %>% select(c(2,1,3,6,5)) %>% arrange(Rank)%>%select(c(2,3,4,5))\n      setnames(table, paste0(vector,\".x\"), vector)\n    }\n    \n    poster.pic.name <- function(vector){\n      foreach(i =1:length(vector),.combine = c)%do%{\n        name <- paste0(gsub(\" \",\"\", vector[i]),\".png\")\n        name <- gsub(\":\",\"\", name)\n        return(name)\n        \n      } -> result ; rm(i)\n      \n      return(result)\n    }\n    \n    table$poster <- poster.pic.name(table$title)\n    \n    return(table)\n  }\n}\n\n\n\nreport.text <- function(List){\n  \n  df <- List$processed.data\n  \n  df2.1 <- data.frame(List$raw.data$BO)\n  df2.1 <- merge(df,df2.1, by = \"title\")\n  df2.1 <- data.table(df2.1)%>% arrange(desc(combined_score))%>%select(which(names(df2.1) %in% c(\"runtime.y\",\"rating.y\")))\n \n  df2.2 <- data.frame(List$raw.data$critics)\n  df2.2 <- merge(df,df2.2, by = \"title\")\n  df2.2 <- data.table(df2.2)%>% arrange(desc(combined_score))%>% select(which(names(df2.2) %in% c(\"RT_perc\",\"RT_rating\",\"RT_audience_perc\",\"RT_audience_rating\")))\n    # select(c(42,39))\n\n  \n  \n  foreach(i = 1:dim(df)[1],.combine = c ) %do%\n    {\n      paste(\n            paste0(\"<a>\",toupper(df$title[i]),\"</a>\"),'<br/>',\n            \"<a>Grade: </a>\", toupper(df$class[i]),'<br/>',\n            \"<a>All-time Ranking: </a>\", df$overall_rank[i],'<br/>',\n            \"<a>Plot: </a>\",df$plot[i], '<br/>',\n            \"<a>Release Date: </a> \", df$release_date[i],'<br/>',\n            \"<a>Director: </a> \", df$director[i],'<br/>',\n            \"<a>Runtime: </a> \", df2.1$runtime.y[i],\"minutes\",'<br/>',\n            \"<a>Rating: </a> \", df2.1$rating.y[i],'<br/>',\n            \"<a>Opening Domestic BO: </a> $\",formatC(as.numeric(df$ow_gross[i]), format=\"f\", digits=2, big.mark=\",\"),'<br/>',\n            \"<a>Domestic BO: </a> $\",  formatC(as.numeric(df$domestic_BO[i]), format=\"f\", digits=2, big.mark=\",\"),'<br/>',\n            \"<a>Foreign BO: </a> $\",formatC(as.numeric(df$foreign_BO[i]), format=\"f\", digits=2, big.mark=\",\"),'<br/>',\n            \"<a>Rotten Tomatoes Critics Tomatometer: </a>\", df2.2$RT_perc[i],\"%\",'<br/>',\n            \"<a>Rotten Tomatoes Critics Rating: </a>\", paste0(df2.2$RT_rating[i],\"/10\"),'<br/>',\n            \"<a>Rotten Tomatoes Audience Tomatometer: </a>\", df2.2$RT_audience_perc[i],\"%\",'<br/>',\n            \"<a>Rotten Tomatoes Audience Rating: </a>\", paste0(df2.2$RT_audience_rating[i],\"/5\"),'<br/>',\n            \"<a>Metascore: </a>\", df$metascore[i],\"%\",'<br/>',\n            \"<a>IMDB: </a>\", df$imdb_rating[i],\"%\",'<br/>',\n            \"<a>Studio: </a>\", df$studio[i]\n            # '<br/>','<br/>','<br/>','<br/>','<br/>','<br/>'\n      )\n\n    }-> results; rm(i)\n\n  df$movie_report <- results\n  List$processed.data <- df\n\n  \n  # return(list(df2.1,df2.2))\n  return(List)\n}\n\n\n\n\n\nfilter.by <- function(filters,df,List){\n  \n \n  \n  # IP, Studio(s), Year(s), Month(s), Runtime(s), Rating(s), \n  # imdb_rating, metascore,\n  \n  df$release_month[which(df$release_month == \"Jan\")] <- 1\n  df$release_month[which(df$release_month == \"Feb\")] <- 2\n  df$release_month[which(df$release_month == \"Mar\")] <- 3\n  df$release_month[which(df$release_month == \"Apr\")] <- 4\n  df$release_month[which(df$release_month == \"May\")] <- 5\n  df$release_month[which(df$release_month == \"Jun\")] <- 6\n  df$release_month[which(df$release_month == \"Jul\")] <- 7\n  df$release_month[which(df$release_month == \"Aug\")] <- 8\n  df$release_month[which(df$release_month == \"Sep\")] <- 9\n  df$release_month[which(df$release_month == \"Oct\")] <- 10\n  df$release_month[which(df$release_month == \"Nov\")] <- 11\n  df$release_month[which(df$release_month == \"Dec\")] <- 12\n  \n  # IP filtering\n  ip <- filters[[1]]\n  if (\"All\" %in% ip){\n    data <- df\n  }else{\n    data <- df%>%filter(IP %in% ip)}\n  \n  # Studios filtering\n  Studios <- filters[[2]]\n  if (\"All\" %in% Studios){\n    data <- data\n  }else{\n    data <- data%>%filter(studio %in% Studios)\n  }\n\n  # Years filtering\n  Years <- filters[[3]]\n  data <- data%>%filter(release_year >= Years[1] & release_year <= Years[2])\n\n  # Months filtering\n  Months <- filters[[4]]\n  if (\"All\" %in% Months){\n    data <- data\n  }else{data <- data%>%filter(release_month %in% Months)}\n    \n  # Runtime filtering\n  Runtimes <- filters[[5]]\n  if(\"All\" %in% Runtimes){\n    data <- data\n  }else{data <- data%>%filter(runtime %in% Runtimes)}\n\n  # Ratings filtering\n  Ratings <- filters[[6]]\n  if (\"All\" %in% Ratings){\n    data <- data\n  }else{data <- data%>%filter(rating %in% Ratings)}\n\n  #Metascore filtering\n  Metascores <- filters[[7]]\n  data <- data%>%filter(metascore >= Metascores[1] & metascore <= Metascores[2])\n\n  #IMDB filtering\n  Imdbs <- filters[[8]]\n  Imdbs <- Imdbs*10\n  data <- data%>%filter(imdb_rating >= Imdbs[1] & imdb_rating <= Imdbs[2])\n\n  # RT_perc, RT_rating, RT_audience_perc, RT_audience_rating\n  critics.raw <- data.table(rbind(List$Critics$dc$raw, List$Critics$marvel$raw))\n  critics.raw <- critics.raw%>%filter(title %in% data$title)\n\n  #Rotten tomatoes critics percent filtering\n  RT_percs <- filters[[9]]\n  critics.raw <- critics.raw%>%filter(RT_perc >= RT_percs[1] & RT_perc <= RT_percs[2])\n\n  #Rotten tomatoes critics rating filtering\n  RT_ratings <- filters[[10]]\n  critics.raw <- critics.raw%>%filter(RT_rating >= RT_ratings[1] & RT_rating <= RT_ratings[2])\n\n  #Rotten tomatoes critics percent filtering\n  RT_audience_percs <- filters[[11]]\n  critics.raw <- critics.raw%>%filter(RT_audience_perc >= RT_audience_percs[1] & RT_audience_perc <= RT_audience_percs[2])\n\n  #Rotten tomatoes audience rating filtering\n  RT_audience_ratings <- filters[[12]]\n  critics.raw <- critics.raw%>%filter(RT_audience_rating >= RT_audience_ratings[1] & RT_audience_rating <= RT_audience_ratings[2])\n\n  ### finally\n  bo.raw <- data.frame(rbind(List$BO$dc$raw, List$BO$marvel$raw))\n  bo.raw <- bo.raw %>% filter(title %in% critics.raw$title)\n\n  data <- data.table(data) %>% filter(title %in% critics.raw$title)\n  \n  raw.list <- list(\"critics\"=critics.raw, \"BO\" = bo.raw)\n  \n  if (dim(data)[1] == 0){return(\"No movie fits the criteria given\")}\n  # return(list(\"processed.data\" = data,\"raw.data\" = raw.list ))\n  return(report.text(list(\"processed.data\" = data,\"raw.data\" = raw.list )))\n}\n\n\n\n\nversus_meta <- function(name, df, List){\n  # if (name != \"The Punisher\"){\n  #   data <- data.table(rbind(List$BO$dc$raw, List$BO$marvel$raw)) %>% filter(title == name)\n  # } else {\n  #   data <- data.frame(rbind(List$BO$dc$raw, List$BO$marvel$raw))\n  #   data <- data.table(data[58,])\n  # }\n  \n  data <- data.table(rbind(List$BO$dc$raw, List$BO$marvel$raw)) %>% filter(title == name)\n  data <- data %>% select(which(names(data) %in% c(\"title\",\"director\",\"genre\",\"rating\",\"runtime\",\"distributor\")))\n  release.date <- data.table(df) %>% filter(title == name) %>% select(c(23,21))\n  \n  fix.director.names <- function(vector){\n    x <- na.omit(vector)\n    \n    foreach(i = 1:length(x), .combine = c) %do% {\n      strsplit(x[i],\"'\")[[1]][2]\n    } -> fixed.names\n    return(fixed.names)\n  }\n  \n  if (is.na(data$director)){\n    data$director <- \"N/A\"\n  }else{\n    data$director <- fix.director.names(data$director)\n  }\n  \n  \n  # return(data)\n  return(\n    paste(\n      '<br/>','<br/>','<br/>',\n      \"<a>Release Date: </a> \", release.date$release_date,'<br/>',\n      \"<a>Director: </a> \", data$director,'<br/>',\n      # \"<a>Genre: </a> \", data$genre,'<br/>',\n      \"<a>Rating: </a> \", data$rating,'<br/>',\n      \"<a>Runtime: </a> \", data$runtime,\" minutes\",'<br/>',\n      \"<a>Studio: </a> \", data$distributor,'<br/>','<br/>','<br/>'\n    )\n  )\n  }\n\n\n\n\n\nversus.weekly.avg <- function(titles, df, List){\n  \n  processed <- data.table(df) %>% filter(title %in% titles)\n  processed <- processed %>% select(which(names(processed) %in% c(\"title\",\"combined_score\")))\n  \n  bo.raw <- data.table(rbind(List$BO$dc$raw, List$BO$marvel$raw))\n  bo.raw <- bo.raw %>% filter(title %in% titles) \n  \n  table <- data.table(merge(processed, bo.raw, by = \"title\")) %>%\n    select(contains(\"title\"),\n           contains(\"combined_score\"),\n           ends_with(\"avg\")) %>% \n    arrange(desc(combined_score))\n  \n  table <- data.table(table)\n\n  \n  first <- plot_ly( x = c(1:15),\n                    y = transpose(table[1] %>% select(3:dim(table)[2]))$V1,\n                    # type = \"markers\"\n                    # orientation = 'h',\n                    marker = list(color = \"#20B2AA\"),\n                    # colors = c(\"#66cccc\"),\n                    name = table$title[1]\n                    )\n  \n  second <- add_trace(first,\n                      x = c(1:15),\n                      y = transpose(table[2] %>% select(3:dim(table)[2]))$V1,\n                      # type = \"markers\"\n                      # orientation = 'h',\n                      marker = list(color = \"red\"),\n                      # colors = c(\"#66cccc\"),\n                      name = table$title[2]\n                      )\n  \n  \n  \n  chart <- layout(second,\n                  title = \"Weekly Average per Theater (hover on point for info)\",\n                  legend = list(font = list(size = 12, color = \"white\"),\n                                x = 0.2, \n                                y = 0.8),\n                  titlefont = list(size = 12, color = \"#0ce3ac\"),\n                  # autosize = F,\n                  # width = 800,\n                  # height = 500,\n                  paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  yaxis = list(title = \"Value (in $)\",\n                               showgrid = F,\n                               zeroline = FALSE,\n                               showline = FALSE,\n                               showticklabels = T,\n                               tickfont = list(size = 12, color = \"white\"),\n                               titlefont= list(size = 12, color = \"white\")\n                               ),\n                  xaxis = list(title = \"Week #\",\n                               showgrid = F,\n                               zeroline = FALSE,\n                               showline = FALSE,\n                               showticklabels = T,\n                               tickfont = list(size = 12, color = \"white\"),\n                               titlefont= list(size = 12, color = \"white\")\n                               )\n                  )\n  \n  return(chart)\n}\n\n\n\n\n\n\nversus.weekly.perc <- function(titles, df, List){\n  \n  processed <- data.table(df) %>% filter(title %in% titles)\n  processed <- processed %>% select(which(names(processed) %in% c(\"title\",\"combined_score\")))\n  \n  bo.raw <- data.table(rbind(List$BO$dc$raw, List$BO$marvel$raw))\n  bo.raw <- bo.raw %>% filter(title %in% titles) \n  \n  table <- data.table(merge(processed, bo.raw, by = \"title\")) %>%\n    select(contains(\"title\"),\n           contains(\"combined_score\"),\n           ends_with(\"change\")) %>% \n    arrange(desc(combined_score))\n  \n  table <- data.table(table)\n  \n  \n  \n  first <- plot_ly( x = c(2:15),\n                    y = transpose(table[1] %>% select(3:dim(table)[2]))$V1,\n                    # type = \"markers\"\n                    # orientation = 'h',\n                    marker = list(color = \"#20B2AA\"),\n                    # colors = c(\"#66cccc\"),\n                    name = table$title[1]\n  )\n  \n  second <- add_trace(first,\n                      x = c(2:15),\n                      y = transpose(table[2] %>% select(3:dim(table)[2]))$V1,\n                      # type = \"markers\"\n                      # orientation = 'h',\n                      marker = list(color = \"red\"),\n                      # colors = c(\"#66cccc\"),\n                      name = table$title[2]\n  )\n  \n  \n  \n  chart <- layout(second,\n                  title = \"Weekly gross as percent of Opening Week BO (hover on point for info)\",\n                  # legend = list(font = list(size = 10, color = \"white\"),\n                  #               x = 0.25, \n                  #               y = 0.75),\n                  showlegend = F,\n                  titlefont = list(size = 12, color = \"#0ce3ac\"),\n                  # autosize = F,\n                  # width = 800,\n                  # height = 500,\n                  paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  yaxis = list(title = \"Value (in %)\",\n                               showgrid = F,\n                               zeroline = FALSE,\n                               showline = FALSE,\n                               showticklabels = T,\n                               tickfont = list(size = 12, color = \"white\"),\n                               titlefont= list(size = 12, color = \"white\")\n                  ),\n                  xaxis = list(title = \"Week #\",\n                               showgrid = F,\n                               zeroline = FALSE,\n                               showline = FALSE,\n                               showticklabels = T,\n                               tickfont = list(size = 12, color = \"white\"),\n                               titlefont= list(size = 12, color = \"white\")\n                  )\n  )\n  \n  return(chart)\n}\n\n\n\n\n\n\nversus.weekly.rank <- function(titles, df, List){\n  \n  processed <- data.table(df) %>% filter(title %in% titles)\n  processed <- processed %>% select(which(names(processed) %in% c(\"title\",\"combined_score\")))\n  \n  bo.raw <- data.table(rbind(List$BO$dc$raw, List$BO$marvel$raw))\n  bo.raw <- bo.raw %>% filter(title %in% titles) \n  \n  table <- data.table(merge(processed, bo.raw, by = \"title\")) %>%\n    select(contains(\"title\"),\n           contains(\"combined_score\"),\n           ends_with(\"rank\")) %>% \n    arrange(desc(combined_score))\n  \n  table <- data.table(table)\n  \n  \n  first <- plot_ly( x = c(1:15),\n                    y = transpose(table[1] %>% select(3:dim(table)[2]))$V1,\n                    # type = \"markers\"\n                    # orientation = 'h',\n                    marker = list(color = \"#20B2AA\"),\n                    # colors = c(\"#66cccc\"),\n                    name = table$title[1]\n  )\n  \n  second <- add_trace(first,\n                      x = c(1:15),\n                      y = transpose(table[2] %>% select(3:dim(table)[2]))$V1,\n                      # type = \"markers\"\n                      # orientation = 'h',\n                      marker = list(color = \"red\"),\n                      # colors = c(\"#66cccc\"),\n                      name = table$title[2]\n  )\n  \n  \n  \n  chart <- layout(second,\n                  title = \"Weekly Rank (hover on point for info)\",\n                  showlegend = F,\n                  # legend = list(font = list(size = 10, color = \"white\"),\n                  #               x = 0.1, \n                  #               y = 0.1),\n                  titlefont = list(size = 12, color = \"#0ce3ac\"),\n                  # autosize = F,\n                  # width = 800,\n                  # height = 500,\n                  paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  yaxis = list(title = \"Ranking #\",\n                               autorange = \"reversed\",\n                               showgrid = F,\n                               zeroline = FALSE,\n                               showline = FALSE,\n                               showticklabels = T,\n                               tickfont = list(size = 12, color = \"white\"),\n                               titlefont= list(size = 12, color = \"white\")\n                  ),\n                  xaxis = list(title = \"Week #\",\n                               showgrid = F,\n                               zeroline = FALSE,\n                               showline = FALSE,\n                               showticklabels = T,\n                               tickfont = list(size = 12, color = \"white\"),\n                               titlefont= list(size = 12, color = \"white\")\n                  )\n  )\n  \n  return(chart)\n}\n\n\n\n\n\n\nversus.BO.chart.1 <- function(titles, df){\n  plot.table <- data.table(df) %>% filter(title %in% titles) %>%\n    select( which(names(df) %in% c(\"title\",\n                                   # \"avg\",\n                                   # \"change\",\n                                   # \"rank\",\n                                   # \"combined_BO\",\n                                   # \"ow_score\",\n                                   # \"theater_run_score\",\n                                   # \"bo_score\",\n                                   \"foreign_BO\",\n                                   \"domestic_BO\",\n                                   \"ow_gross\",\n                                   \"combined_score\"\n                                   )\n                  )\n            ) %>% select(c(4,5,3,2,1\n                           # 11,12,10,9,8,5,4,6,1,2,3,7\n                          )\n                        ) %>% arrange(desc(combined_score))\n  \n  # plot.table <- data.table(data)\n  \n  chart_step.1 <- plot_ly( \n                           x = c(\"Opening Week\",\n                                 \"Domestic\",\n                                 \"Foreign\"\n                                 # \"After Opening Week Gross (in %)\",\n                                 # \"Foreign & Domestic BO - Weighted Mean (30/70)\",\n                                 # \"Theater Run Coef (weeks in theaters/ standard 15 weeks)\",\n                                 # \"Weekly Average Gross per Theater Score\",\n                                 # \"Weekly Gross as % of Opening Week BO Score\",\n                                 # \"Weekly Rank Score\",\n                                 # \"Overall Box Office Performance Score\"\n                                 ),\n                           # y = c( 10, 20, 50),\n                           y = transpose(data.table(plot.table)[1] %>% select(3:5))$V1,\n                           type = \"bar\",\n                           marker = list(color = \"#20B2AA\"),\n                           name = plot.table$title[1]\n                           )\n  \n  \n  chart_step.2 <- add_trace(chart_step.1,\n                            x = c(\"Opening Week\",\n                                  \"Domestic\",\n                                  \"Foreign\"\n                                  # \"After Opening Week Gross (in %)\",\n                                  # \"Foreign & Domestic BO - Weighted Mean (30/70)\",\n                                  # \"Theater Run Coef (weeks in theaters/ standard 15 weeks)\",\n                                  # \"Weekly Average Gross per Theater Score\",\n                                  # \"Weekly Gross as % of Opening Week BO Score\",\n                                  # \"Weekly Rank Score\",\n                                  # \"Overall Box Office Performance Score\"\n                            ),\n                            # y = c( 10, 20, 50),\n                            y = transpose(data.table(plot.table)[2] %>% select(3:5))$V1,\n                            type = \"bar\",\n                            marker = list(color = \"red\"),\n                            name = plot.table$title[2]\n                            )\n  \n  \n  chart <- layout(chart_step.2,\n                  title = \"\",\n                  showlegend = F,\n                  # legend = list(font = list(size = 10, color = \"white\"),\n                  #               x = 0.05, \n                  #               y = 1\n                  # ),\n                  titlefont = list(size = 12, color = \"#0ce3ac\"),\n                  # autosize = F,\n                  # width = 800,\n                  # height = 500,\n                  paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  yaxis = list(title = \"Value (in $)\",\n                               # autorange = \"reversed\",\n                               showgrid = F,\n                               zeroline = FALSE,\n                               showline = FALSE,\n                               showticklabels = T,\n                               tickfont = list(size = 12, color = \"white\"),\n                               titlefont= list(size = 12, color = \"white\")\n                               ),\n                  xaxis = list(title = \"Gross Sales (hover on bars for info)\",\n                               showgrid = F,\n                               zeroline = FALSE,\n                               showline = FALSE,\n                               showticklabels = F,\n                               tickfont = list(size = 12, color = \"white\"),\n                               titlefont= list(size = 12, color = \"white\")\n                               )\n                  )\n  \n  \n  # return(plot.table)\n  return(chart)\n}\n\n\n\n\n\nversus.BO.chart.2 <- function(titles, df){\n  plot.table <- data.table(df) %>% filter(title %in% titles) %>%\n    select( which(names(df) %in% c(\"title\",\n                                   \"avg\",\n                                   \"change\",\n                                   \"rank\",\n                                   \"combined_BO\",\n                                   \"bo_score\",\n                                   \"combined_score\"\n                                  )\n                  )\n            )%>% select(c(6,7,1:5)) %>% arrange(desc(combined_score))\n  \n  # plot.table <- data.table(data)\n  \n  chart_step.1 <- plot_ly( \n                           x = c(\"Score for Weekly Average Gross per Theater\",\n                                 \"Score for Weekly Gross as % of Opening Week BO\",\n                                 \"Score for Weekly Rank\",\n                                 \"Foreign & Domestic BO Weighted Mean (30/70)\",\n                                 # \"After Opening Week Gross (in %)\",\n                                 \"Overall Box Office Performance Index\"\n                           ),\n                           y = c(20,200,2,2,10)*transpose(data.table(plot.table)[1] %>% select(3:7))$V1,\n                           type = \"bar\",\n                           marker = list(color = \"#20B2AA\"),\n                           name = plot.table$title[1]\n                          )\n  \n  \n  chart_step.2 <- add_trace(chart_step.1,\n                            x = c(\"Score for Weekly Average Gross per Theater\",\n                                  \"Score for Weekly Gross as % of Opening Week BO\",\n                                  \"Score for Weekly Rank\",\n                                  \"Foreign & Domestic BO Weighted Mean (30/70)\",\n                                  # \"After Opening Week Gross (in %)\",\n                                  \"Overall Box Office Performance Index\"\n                                  ),\n                            y = c(20, 200,2,2,10)*transpose(data.table(plot.table)[2] %>% select(3:7))$V1,\n                            type = \"bar\",\n                            marker = list(color = \"red\"),\n                            name = plot.table$title[2]\n                            )\n  \n  \n  chart <- layout(chart_step.2,\n                  title = \"\",\n                  showlegend = F,\n                  # legend = list(font = list(size = 10, color = \"white\"),\n                  #               x = 0.05, \n                  #               y = 1\n                  #               ),\n                  titlefont = list(size = 12, color = \"#0ce3ac\"),\n                  # autosize = F,\n                  # width = 800,\n                  # height = 500,\n                  paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  yaxis = list(title = \"Value (higher is better)\",\n                               # autorange = \"reversed\",\n                               showgrid = F,\n                               zeroline = FALSE,\n                               showline = FALSE,\n                               showticklabels = T,\n                               tickfont = list(size = 12, color = \"white\"),\n                               titlefont= list(size = 12, color = \"white\")\n                  ),\n                  xaxis = list(title = \"BO Metrics (hover on bars for info)\",\n                               showgrid = F,\n                               zeroline = FALSE,\n                               showline = FALSE,\n                               showticklabels = F,\n                               tickfont = list(size = 12, color = \"white\"),\n                               titlefont= list(size = 12, color = \"white\")\n                  )\n  )\n  \n  \n  # return(plot.table)\n  return(chart)\n}\n\n\n\n\n\n\n\nversus_critics <- function(titles, df, List){\n  \n  processed <- data.table(df) %>% filter(title %in% titles)\n  \n  critics.raw <- data.table(rbind(List$Critics$dc$raw, List$Critics$marvel$raw))\n  critics.raw <- critics.raw %>% filter(title %in% titles) %>% select(c(3,4,5,7,12,13,9,10,11))\n  \n  bo.raw <- data.frame(rbind(List$BO$dc$raw, List$BO$marvel$raw))\n  bo.raw <- bo.raw %>% filter(title %in% titles)\n  \n  raw <- data.table(bo.raw,critics.raw)\n  \n  table.1 <- raw %>% select(c(1,58,59,60,61,55,54))\n  table.2 <- processed %>% select(c(23,17:19))\n  \n  plot.table <- data.table(merge(table.1,table.2, by = \"title\"))%>% arrange(desc(critics_score))\n  plot.table$imdb_rating <- 10*plot.table$imdb_rating \n  plot.table$RT_rating <-  100*(plot.table$RT_rating/10)\n  plot.table$RT_audience_rating <-  100*(plot.table$RT_audience_rating/5)\n  \n  plot.table <- data.table(plot.table)\n  \n  chart_step.1 <- plot_ly(\n                            x = c( \n                              \"Rotten Tomatoes Critics Tometometer\",\n                              \"Rotten Tomates Critics Rating\",\n                              \"Rotten Tomatoes Audience Tometometer\",\n                              \"Rotten Tomatoes Audience Rating\",\n                              \"Metascore\",\n                              \"IMDB\",\n                              \"Custom Rotten Tomatoes Critics Score\",\n                              \"Custom Rotten Tomatoes Audience Score\",\n                              \"Overall Estimated Critical Reception\"\n                            ), \n                            y = transpose(plot.table[1] %>% select(2:10))$V1,\n                            type = \"bar\",\n                            # orientation = 'h',\n                            marker = list(color = \"#20B2AA\"),\n                            # colors = c(\"#66cccc\"),\n                            name = plot.table$title[1]\n                            )\n  \n  chart_step.2 <- add_trace(chart_step.1,\n                              x = c( \n                                \"Rotten Tomatoes Critics Tometometer\",\n                                \"Rotten Tomates Critics Rating\",\n                                \"Rotten Tomatoes Audience Tometometer\",\n                                \"Rotten Tomatoes Audience Rating\",\n                                \"Metascore\",\n                                \"IMDB\",\n                                \"Custom Rotten Tomatoes Critics Score\",\n                                \"Custom Rotten Tomatoes Audience Score\",\n                                \"Overall Estimated Critical Reception\"\n                              ), \n                              y = transpose(plot.table[2] %>% select(2:10))$V1,\n                              type = \"bar\",\n                              marker = list(color = \"red\"),\n                              # orientation = 'h',\n                              name = plot.table$title[2])\n  \n  \n  \n  \n  \n  \n  \n  chart <- layout(chart_step.2,\n                  title = \"Critical Reception Comparison (hover on bars for info)\",\n                  legend = list(font = list(size = 15, color = \"white\")),\n                  titlefont = list( color = \"#0ce3ac\"),\n                  autosize = F, \n                  width = 1200, \n                  height = 600,\n                  paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  yaxis = list(title = \"Value (in %)\",\n                               showgrid = F,\n                               zeroline = FALSE,\n                               showline = FALSE,\n                               showticklabels = T,\n                               tickfont = list(size = 15, color = \"white\"),\n                               titlefont= list(size = 15, color = \"white\")\n                               ),\n                  xaxis = list(title = \"Critical Reception Metrics\",\n                               showgrid = F,\n                               zeroline = FALSE,\n                               showline = FALSE,\n                               showticklabels = F,\n                               tickfont = list(size = 15, color = \"white\"),\n                               titlefont= list(size = 15, color = \"white\")\n                               )\n                  )\n  \n  \n  rt_consensus <- raw %>% select(c(1,dim(raw)[2]))\n  rt_consensus <- data.table(merge(rt_consensus, plot.table, by = \"title\")) %>% select(c(1,2))\n  \n  foreach( i =1:2) %do% {\n    paste(\n      \"</br>\",\"</br>\",\"</br>\",\n      paste0(\"<a><h4>\",\" Rotten Tomatoes Consensus: \",\"</h4></a>\"),\n      \"</br>\",\n      paste0(\"<p>\",rt_consensus$RT_consensus[i],\"</p>\"), \n      \"</br>\",\"</br>\",\"</br>\"\n      )\n  } -> consensus ; rm(i)\n  names(consensus) <- rt_consensus$title\n  return(list(\"chart\" = chart, \"consensus\" = consensus))\n  \n}\n\n\n",
    "created" : 1467377499299.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1024896216",
    "id" : "1E1237F8",
    "lastKnownWriteTime" : 1468243093,
    "last_content_update" : 1468243093387,
    "path" : "~/Documents/GitHub/CBM/R/helpers.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}