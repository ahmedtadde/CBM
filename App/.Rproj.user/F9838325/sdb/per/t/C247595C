{
    "collab_server" : "",
    "contents" : "source('../R/helpers.R')\nlibraries()\n\nnames <- c(\"dc\",\"marvel\")\ndata <- getData(names)\n\nraw.data <- list(\"BO\" = data$BO, \"Critics\" = data$Critics)\nraw.data$BO$dc$raw$title <- raw.data$Critics$dc$raw$title\nraw.data$BO$marvel$raw$title <- raw.data$Critics$marvel$raw$title\nprocessed.data <- data$df\n\nrm(list = c(\"data\",\"names\"))\n\nshinyServer(function(input, output) {\n  \n  #============================== ALL TIME RANKING ===================================================\n  output$Viz <- renderPlotly({\n    \n    Viz(processed.data)$viz\n    }) \n  \n  output$combined.ranking.table <- renderTable({\n\n    Viz(processed.data)$table%>%select(2,5,3,4,1)\n    })\n  \n  #============================== VERSUS ===================================================\n  \n  \n  output$firstmovie.poster.CR <- renderUI({\n    \n    poster.pic.name <- function(title){\n      name <- paste0(gsub(\" \",\"\", title),\".png\")\n      name <- gsub(\":\",\"\", name)\n      return(name)\n    }\n    \n  \n    tags$img(src = poster.pic.name(input$firstmovie.CR))\n  })\n  \n  output$firstmovie.poster.BOP <- renderUI({\n    \n    poster.pic.name <- function(title){\n      name <- paste0(gsub(\" \",\"\", title),\".png\")\n      name <- gsub(\":\",\"\", name)\n      return(name)\n    }\n    \n    \n    tags$img(src = poster.pic.name(input$firstmovie.BOP))\n  })\n  \n  output$VERSUS.BOP<- renderUI({\n    \n    tags$img(src = \"versus.png\", height =300, width = 300)\n  })\n  \n  \n  output$VERSUS.CR<- renderUI({\n    \n    tags$img(src = \"versus.png\", height =300, width = 300)\n    })\n  \n  output$secondmovie.poster.BOP <- renderUI({\n    \n    poster.pic.name <- function(title){\n      name <- paste0(gsub(\" \",\"\", title),\".png\")\n      name <- gsub(\":\",\"\", name)\n      return(name)\n    }\n    \n    tags$img(src = poster.pic.name(input$secondmovie.BOP))\n    })\n  \n  \n  \n  output$secondmovie.poster.CR <- renderUI({\n    \n    poster.pic.name <- function(title){\n      name <- paste0(gsub(\" \",\"\", title),\".png\")\n      name <- gsub(\":\",\"\", name)\n      return(name)\n    }\n    \n    tags$img(src = poster.pic.name(input$secondmovie.CR))\n  })\n  \n  \n  output$firstmovie.meta.BOP <- renderUI({\n    title <- input$firstmovie.BOP\n    HTML(versus_meta(title,processed.data, raw.data))\n    })\n  \n  output$firstmovie.meta.CR <- renderUI({\n    title <- input$firstmovie.CR\n    HTML(versus_meta(title,processed.data, raw.data))\n    })\n  \n  output$secondmovie.meta.BOP <- renderUI({\n    title <- input$secondmovie.BOP\n    HTML(versus_meta(title,processed.data ,raw.data))\n    })\n  \n  output$secondmovie.meta.CR <- renderUI({\n    title <- input$secondmovie.CR\n    HTML(versus_meta(title,processed.data ,raw.data))\n  })\n  \n  \n  \n  output$firstmovie.critics_consensus <- renderUI({\n    consensus <- versus_critics(c(input$firstmovie.CR, input$secondmovie.CR),\n                                   processed.data,\n                                   raw.data)\n\n    consensus <- consensus$consensus\n\n    HTML(consensus[[which(names(consensus) == input$firstmovie.CR)]])\n    })\n\n\n  output$secondmovie.critics_consensus <- renderUI({\n    consensus <- versus_critics(c(input$firstmovie.CR, input$secondmovie.CR),\n                                   processed.data,\n                                   raw.data)\n    consensus <- consensus$consensus\n    HTML(consensus[[which(names(consensus) == input$secondmovie.CR)]])\n    })\n\n  output$versus_critics_chart <- renderPlotly({\n    consensus <- versus_critics(c(input$firstmovie.CR, input$secondmovie.CR),\n                                processed.data,\n                                raw.data)\n\n    consensus$chart\n    })\n  \n  \n  output$versus.weekly.avg <- renderPlotly({\n    \n    versus.weekly.avg(c(input$firstmovie.BOP, input$secondmovie.BOP),processed.data,raw.data)\n    \n  })\n  \n  output$versus.weekly.perc <- renderPlotly({\n    \n    versus.weekly.perc(c(input$firstmovie.BOP, input$secondmovie.BOP),processed.data,raw.data)\n    \n  })\n  \n  output$versus.weekly.rank <- renderPlotly({\n    \n    versus.weekly.rank(c(input$firstmovie.BOP, input$secondmovie.BOP),processed.data,raw.data)\n    \n  })\n  \n  \n  output$versus_BO_chart.1 <- renderPlotly({\n    versus.BO.chart.1(c(input$firstmovie.BOP, input$secondmovie.BOP),processed.data)\n  })\n  \n  output$versus_BO_chart.2 <- renderPlotly({\n    versus.BO.chart.2(c(input$firstmovie.BOP, input$secondmovie.BOP),processed.data)\n  })\n  \n  \n   #============================== RANKING ===================================================\n  \n  output$rank.number <- renderUI({\n    \n    \n    ip <- input$ip\n    studio <- input$studio\n    years <- input$years\n    \n    months <- input$months\n    months[which(months == \"Jan\")] <- 1\n    months[which(months == \"Feb\")] <- 2\n    months[which(months == \"Mar\")] <- 3\n    months[which(months == \"Apr\")] <- 4\n    months[which(months == \"May\")] <- 5\n    months[which(months == \"Jun\")] <- 6\n    months[which(months == \"Jul\")] <- 7\n    months[which(months == \"Aug\")] <- 8\n    months[which(months == \"Sep\")] <- 9\n    months[which(months == \"Oct\")] <- 10\n    months[which(months == \"Nov\")] <- 11\n    months[which(months == \"Dec\")] <- 12\n    \n    runtime <- input$runtime\n    runtime[which(runtime == \"Under 1h30\")] <- 1\n    runtime[which(runtime == \"Between 1h:30 and 2h:00\")] <- 2\n    runtime[which(runtime == \"Between 2h:00 and 2h:30\")] <- 3\n    runtime[which(runtime == \"Between 2h:30 and 3h:00\")] <- 4\n    \n    rating <- input$rating\n    rating[which(rating == \"PG\")] <- 1\n    rating[which(rating == \"PG-13\")] <- 2\n    rating[which(rating == \"R\")] <- 3\n    \n    metascore <- input$metascore\n    imdb <- input$imdb\n    RT_perc <- input$RT_perc\n    RT_rating <- input$RT_rating\n    RT_audience_perc <- input$RT_audience_perc\n    RT_audience_rating <- input$RT_audience_rating\n    \n    filters <- list(ip,studio,years,months,runtime, rating,\n                    metascore,imdb,RT_perc,RT_rating,\n                    RT_audience_perc,RT_audience_rating)\n    \n    filtering <- filter.by(filters,processed.data,raw.data)\n    \n    \n    foreach(i=1:dim(filtering$processed.data)[1]) %do% {\n      paste(\n        tags$table(style=\"width:100%;border-spacing:15px;padding:5px\",\n                   tags$tr(\n                     tags$td(height=\"600\", tags$a(as.character(i)))\n                   )\n        ),\n        tags$br(),\n        tags$br(),\n        tags$br()\n      )\n    } -> ranking; rm(i)\n    \n    HTML(\n      paste(ranking[1:length(ranking)],sep='<br/>'))\n    \n  })\n  \n  \n  \n  \n  \n  \n  output$report <- renderUI({\n    ip <- input$ip\n    studio <- input$studio\n    years <- input$years\n  \n    months <- input$months\n    months[which(months == \"Jan\")] <- 1\n    months[which(months == \"Feb\")] <- 2\n    months[which(months == \"Mar\")] <- 3\n    months[which(months == \"Apr\")] <- 4\n    months[which(months == \"May\")] <- 5\n    months[which(months == \"Jun\")] <- 6\n    months[which(months == \"Jul\")] <- 7\n    months[which(months == \"Aug\")] <- 8\n    months[which(months == \"Sep\")] <- 9\n    months[which(months == \"Oct\")] <- 10\n    months[which(months == \"Nov\")] <- 11\n    months[which(months == \"Dec\")] <- 12\n  \n    runtime <- input$runtime\n    runtime[which(runtime == \"Under 1h30\")] <- 1\n    runtime[which(runtime == \"Between 1h:30 and 2h:00\")] <- 2\n    runtime[which(runtime == \"Between 2h:00 and 2h:30\")] <- 3\n    runtime[which(runtime == \"Between 2h:30 and 3h:00\")] <- 4\n  \n    rating <- input$rating\n    rating[which(rating == \"PG\")] <- 1\n    rating[which(rating == \"PG-13\")] <- 2\n    rating[which(rating == \"R\")] <- 3\n  \n    metascore <- input$metascore\n    imdb <- input$imdb\n    RT_perc <- input$RT_perc\n    RT_rating <- input$RT_rating\n    RT_audience_perc <- input$RT_audience_perc\n    RT_audience_rating <- input$RT_audience_rating\n  \n    filters <- list(ip,studio,years,months,runtime, rating,\n                    metascore,imdb,RT_perc,RT_rating,\n                    RT_audience_perc,RT_audience_rating)\n  \n    filtering <- filter.by(filters,processed.data,raw.data)\n  \n  \n  \n    rank.options1 <- c(\"Overall Critical Reception\",\n                       \"Overall Box Office Performance\",\n                       \"Rotten Tomatoes Critics Tomatometer\",\n                       \"Rotten Tomatoes Critics Rating\",\n                       \"Custom Rotten Tomatoes Critics Score\",\n                       \"Rotten Tomatoes Audience Tomatometer\",\n                       \"Rotten Tomatoes Audience Rating\",\n                       \"Custom Rotten Tomatoes Audience Score\",\n                       \"Metascore\",\"IMDB\",\"Foreign Box Office Gross\", \n                       \"Domestic Box Office Gross\",\n                       \"Foreign & Domestic BO - Weighted Mean (30/70)\",\n                       \"Weekly Average per Theater\",\n                       \"Weekly Grosses as % of Opening Week\",\n                       \"Weekly Ranking\")\n  \n    rank.options2 <- c(\n                        \"critics_score\",\n                        \"bo_score\",\n                        \"RT_perc\",\n                        \"RT_rating\",\n                        \"RT_score\",\n                        \"RT_audience_perc\",\n                        \"RT_audience_rating\",\n                        \"RT_audience_score\",\n                        \"metascore\",\"imdb_rating\",\n                        \"foreign_BO\",\"domestic_BO\",\"combined_BO\",\n                        \"avg\",\"change\",\"rank\"\n                        )\n    input$rank.by -> criterion\n  \n    foreach(i = 1:length(rank.options2), .combine = c) %do% {\n      if (criterion == rank.options1[i]){\n        return(rank.options2[i])\n        }\n    } -> criterion; rm(i)\n  \n    criterion\n    rank <- rank.by(criterion,filtering)\n    rm(list = c(\"rank.options1\",\"rank.options2\", \"filters\"))\n  \n    foreach(i=1:dim(rank)[1]) %do% {\n      paste(\n        tags$table(style=\"width:100%;border-spacing:15px;padding:5px\",\n                   tags$tr(\n                     tags$td(height=\"600\",HTML(paste(rank$movie_report[i])))\n                   )\n        ),\n        tags$br(),\n        tags$br(),\n        tags$br()\n      )\n    } -> text.reports; rm(i)\n  \n    HTML(\n      paste(text.reports[1:length(text.reports)],sep='<br/>'))\n  })\n  \n  \n  \n  \n  output$poster <- renderUI({\n    ip <- input$ip\n    studio <- input$studio\n    years <- input$years\n  \n    months <- input$months\n    months[which(months == \"Jan\")] <- 1\n    months[which(months == \"Feb\")] <- 2\n    months[which(months == \"Mar\")] <- 3\n    months[which(months == \"Apr\")] <- 4\n    months[which(months == \"May\")] <- 5\n    months[which(months == \"Jun\")] <- 6\n    months[which(months == \"Jul\")] <- 7\n    months[which(months == \"Aug\")] <- 8\n    months[which(months == \"Sep\")] <- 9\n    months[which(months == \"Oct\")] <- 10\n    months[which(months == \"Nov\")] <- 11\n    months[which(months == \"Dec\")] <- 12\n  \n    runtime <- input$runtime\n    runtime[which(runtime == \"Under 1h30\")] <- 1\n    runtime[which(runtime == \"Between 1h:30 and 2h:00\")] <- 2\n    runtime[which(runtime == \"Between 2h:00 and 2h:30\")] <- 3\n    runtime[which(runtime == \"Between 2h:30 and 3h:00\")] <- 4\n  \n    rating <- input$rating\n    rating[which(rating == \"PG\")] <- 1\n    rating[which(rating == \"PG-13\")] <- 2\n    rating[which(rating == \"R\")] <- 3\n  \n    metascore <- input$metascore\n    imdb <- input$imdb\n    RT_perc <- input$RT_perc\n    RT_rating <- input$RT_rating\n    RT_audience_perc <- input$RT_audience_perc\n    RT_audience_rating <- input$RT_audience_rating\n  \n    filters <- list(ip,studio,years,months,runtime, rating,\n                    metascore,imdb,RT_perc,RT_rating,\n                    RT_audience_perc,RT_audience_rating)\n  \n    filtering <- filter.by(filters,processed.data,raw.data)\n  \n  \n  \n    rank.options1 <- c(\"Overall Critical Reception\",\n                       \"Overall Box Office Performance\",\n                       \"Rotten Tomatoes Critics Tomatometer\",\n                       \"Rotten Tomatoes Critics Rating\",\n                       \"Custom Rotten Tomatoes Critics Score\",\n                       \"Rotten Tomatoes Audience Tomatometer\",\n                       \"Rotten Tomatoes Audience Rating\",\n                       \"Custom Rotten Tomatoes Audience Score\",\n                       \"Metascore\",\"IMDB\",\"Foreign Box Office Gross\", \n                       \"Domestic Box Office Gross\",\n                       \"Foreign & Domestic BO - Weighted Mean (30/70)\",\n                       \"Weekly Average per Theater\",\n                       \"Weekly Grosses as % of Opening Week\",\n                       \"Weekly Ranking\")\n  \n    rank.options2 <- c(\n      \"critics_score\",\n      \"bo_score\",\n      \"RT_perc\",\n      \"RT_rating\",\n      \"RT_score\",\n      \"RT_audience_perc\",\n      \"RT_audience_rating\",\n      \"RT_audience_score\",\n      \"metascore\",\"imdb_rating\",\n      \"foreign_BO\",\"domestic_BO\",\"combined_BO\",\n      \"avg\",\"change\",\"rank\"\n    )\n    input$rank.by -> criterion\n  \n    foreach(i = 1:length(rank.options2), .combine = c) %do% {\n      if (criterion == rank.options1[i]){\n        return(rank.options2[i])\n      }\n    } -> criterion; rm(i)\n  \n    criterion\n    rank <- rank.by(criterion,filtering)\n    rm(list = c(\"rank.options1\",\"rank.options2\", \"filters\"))\n  \n    foreach(i=1:dim(rank)[1]) %do% {\n      paste(\n        tags$table(style=\"width:100%;border-spacing:15px;padding:5px\",\n          tags$tr(\n            tags$td(height=\"600\",tags$img(src = rank$poster[i]))\n            )\n        ),\n        tags$br(),\n        tags$br(),\n        tags$br()\n      )\n    } -> posters; rm(i)\n  \n     HTML(\n      paste(posters[1:length(posters)],sep='<br/>'))\n  \n   \n  })\n  \n  \n})\n\n\n\n  \n\n\n",
    "created" : 1467379946995.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1052590503",
    "id" : "C247595C",
    "lastKnownWriteTime" : 1468244178,
    "last_content_update" : 1468244178,
    "path" : "C:/Users/temp_atadde/Desktop/MY STUFF/GITHUB/CBM/App/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}